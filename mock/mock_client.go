// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go
//
// Generated by this command:
//
//	mockgen -source=./client.go -destination=./mock/mock_client.go -package=mocks3batchstore Client, S3Client
//

// Package mocks3batchstore is a generated GoMock package.
package mocks3batchstore

import (
	context "context"
	reflect "reflect"

	s3 "github.com/aws/aws-sdk-go-v2/service/s3"
	s3batchstore "github.com/embrace-io/s3-batch-object-store"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient[K comparable] struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder[K]
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder[K comparable] struct {
	mock *MockClient[K]
}

// NewMockClient creates a new mock instance.
func NewMockClient[K comparable](ctrl *gomock.Controller) *MockClient[K] {
	mock := &MockClient[K]{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder[K]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient[K]) EXPECT() *MockClientMockRecorder[K] {
	return m.recorder
}

// DeleteFromS3 mocks base method.
func (m *MockClient[K]) DeleteFromS3(ctx context.Context, file *s3batchstore.TempFile[K]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromS3", ctx, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFromS3 indicates an expected call of DeleteFromS3.
func (mr *MockClientMockRecorder[K]) DeleteFromS3(ctx, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromS3", reflect.TypeOf((*MockClient[K])(nil).DeleteFromS3), ctx, file)
}

// Fetch mocks base method.
func (m *MockClient[K]) Fetch(ctx context.Context, ind s3batchstore.ObjectIndex) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, ind)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockClientMockRecorder[K]) Fetch(ctx, ind any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockClient[K])(nil).Fetch), ctx, ind)
}

// NewTempFile mocks base method.
func (m *MockClient[K]) NewTempFile(tags map[string]string) (*s3batchstore.TempFile[K], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTempFile", tags)
	ret0, _ := ret[0].(*s3batchstore.TempFile[K])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewTempFile indicates an expected call of NewTempFile.
func (mr *MockClientMockRecorder[K]) NewTempFile(tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTempFile", reflect.TypeOf((*MockClient[K])(nil).NewTempFile), tags)
}

// UploadToS3 mocks base method.
func (m *MockClient[K]) UploadToS3(ctx context.Context, file *s3batchstore.TempFile[K], withMetaFile bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadToS3", ctx, file, withMetaFile)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadToS3 indicates an expected call of UploadToS3.
func (mr *MockClientMockRecorder[K]) UploadToS3(ctx, file, withMetaFile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadToS3", reflect.TypeOf((*MockClient[K])(nil).UploadToS3), ctx, file, withMetaFile)
}

// MockS3Client is a mock of S3Client interface.
type MockS3Client struct {
	ctrl     *gomock.Controller
	recorder *MockS3ClientMockRecorder
}

// MockS3ClientMockRecorder is the mock recorder for MockS3Client.
type MockS3ClientMockRecorder struct {
	mock *MockS3Client
}

// NewMockS3Client creates a new mock instance.
func NewMockS3Client(ctrl *gomock.Controller) *MockS3Client {
	mock := &MockS3Client{ctrl: ctrl}
	mock.recorder = &MockS3ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3Client) EXPECT() *MockS3ClientMockRecorder {
	return m.recorder
}

// DeleteObjects mocks base method.
func (m *MockS3Client) DeleteObjects(ctx context.Context, params *s3.DeleteObjectsInput, optFns ...func(*s3.Options)) (*s3.DeleteObjectsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteObjects", varargs...)
	ret0, _ := ret[0].(*s3.DeleteObjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObjects indicates an expected call of DeleteObjects.
func (mr *MockS3ClientMockRecorder) DeleteObjects(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjects", reflect.TypeOf((*MockS3Client)(nil).DeleteObjects), varargs...)
}

// GetObject mocks base method.
func (m *MockS3Client) GetObject(ctx context.Context, params *s3.GetObjectInput, optFns ...func(*s3.Options)) (*s3.GetObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObject", varargs...)
	ret0, _ := ret[0].(*s3.GetObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockS3ClientMockRecorder) GetObject(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockS3Client)(nil).GetObject), varargs...)
}

// PutObject mocks base method.
func (m *MockS3Client) PutObject(ctx context.Context, params *s3.PutObjectInput, optFns ...func(*s3.Options)) (*s3.PutObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutObject", varargs...)
	ret0, _ := ret[0].(*s3.PutObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObject indicates an expected call of PutObject.
func (mr *MockS3ClientMockRecorder) PutObject(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockS3Client)(nil).PutObject), varargs...)
}
